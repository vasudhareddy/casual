import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.JAXBException;
import jakarta.xml.soap.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.ws.soap.saaj.SaajSoapMessage;

@ExtendWith(MockitoExtension.class)
public class SOAPServiceTest {

    @InjectMocks
    private SOAPService soapService;

    @Mock
    private SOAPConnection mockSoapConnection;

    @Mock
    private SOAPMessage mockSoapMessage;

    @Mock
    private SOAPBody mockSoapBody;

    @Mock
    private SaajSoapMessage mockSaajSoapMessage;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testSendSOAPRequest_Success() throws Exception {
        // Arrange
        LoanSearchMwsRequest requestObject = new LoanSearchMwsRequest();
        LoanSearchResponse expectedResponse = new LoanSearchResponse();
        String endpointUrl = "http://mock.url";
        String authToken = "mockToken";
        String soapAction = "mockAction";

        // Mock SOAP message creation
        when(mockSoapMessage.getSOAPBody()).thenReturn(mockSoapBody);
        when(mockSaajSoapMessage.getSaajMessage()).thenReturn(mockSoapMessage);

        // Mock SOAP call returning a response
        when(mockSoapConnection.call(any(SOAPMessage.class), eq(endpointUrl)))
                .thenReturn(mockSoapMessage);

        // Mock JAXB conversion
        JAXBContext mockJAXBContext = mock(JAXBContext.class);
        when(JAXBContext.newInstance(LoanSearchResponse.class)).thenReturn(mockJAXBContext);
        when(mockJAXBContext.createUnmarshaller().unmarshal(mockSoapMessage.getSOAPBody(), LoanSearchResponse.class))
                .thenReturn(expectedResponse);

        // Act
        LoanSearchResponse actualResponse = soapService.sendSOAPRequest(
            requestObject,
            LoanSearchMwsRequest.class,
            LoanSearchResponse.class,
            endpointUrl,
            authToken,
            soapAction
        );

        // Assert
        assertNotNull(actualResponse);
        verify(mockSoapConnection, times(1)).call(any(SOAPMessage.class), eq(endpointUrl));
    }

    @Test
    void testSendSOAPRequest_SOAPException() throws Exception {
        // Arrange
        LoanSearchMwsRequest requestObject = new LoanSearchMwsRequest();
        String endpointUrl = "http://mock.url";
        String authToken = "mockToken";
        String soapAction = "mockAction";

        when(mockSoapConnection.call(any(SOAPMessage.class), eq(endpointUrl)))
                .thenThrow(new SOAPException("SOAP Error"));

        // Act & Assert
        assertThrows(SoapServiceException.class, () ->
            soapService.sendSOAPRequest(
                requestObject,
                LoanSearchMwsRequest.class,
                LoanSearchResponse.class,
                endpointUrl,
                authToken,
                soapAction
            )
        );
    }

    @Test
    void testSendSOAPRequest_JAXBException() throws Exception {
        // Arrange
        LoanSearchMwsRequest requestObject = new LoanSearchMwsRequest();
        String endpointUrl = "http://mock.url";
        String authToken = "mockToken";
        String soapAction = "mockAction";

        when(mockSoapConnection.call(any(SOAPMessage.class), eq(endpointUrl)))
                .thenReturn(mockSoapMessage);

        when(JAXBContext.newInstance(LoanSearchResponse.class))
                .thenThrow(new JAXBException("JAXB Error"));

        // Act & Assert
        assertThrows(SoapServiceException.class, () ->
            soapService.sendSOAPRequest(
                requestObject,
                LoanSearchMwsRequest.class,
                LoanSearchResponse.class,
                endpointUrl,
                authToken,
                soapAction
            )
        );
    }
}
