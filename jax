@Test
void testSendSOAPRequest_Success() throws Exception {
    // Arrange
    LoanSearchMwsRequest requestObject = new LoanSearchMwsRequest();
    LoanSearchResponse expectedResponse = new LoanSearchResponse();
    String endpointUrl = "http://mock.url";
    String authToken = "mockToken";
    String soapAction = "mockAction";

    // Mock SOAP message creation
    when(mockSoapMessage.getSOAPBody()).thenReturn(mockSoapBody);
    when(mockSaajSoapMessage.getSaajMessage()).thenReturn(mockSoapMessage);

    // Mock SOAP call returning a response
    when(mockSoapConnection.call(any(SOAPMessage.class), eq(endpointUrl)))
            .thenReturn(mockSoapMessage);

    // Mock JAXB conversion
    JAXBContext mockJAXBContext = mock(JAXBContext.class);
    Unmarshaller mockUnmarshaller = mock(Unmarshaller.class);
    
    when(JAXBContext.newInstance(LoanSearchResponse.class)).thenReturn(mockJAXBContext);
    when(mockJAXBContext.createUnmarshaller()).thenReturn(mockUnmarshaller);

    // Correctly return JAXBElement<LoanSearchResponse>
    JAXBElement<LoanSearchResponse> mockJAXBElement = mock(JAXBElement.class);
    when(mockJAXBElement.getValue()).thenReturn(expectedResponse);
    when(mockUnmarshaller.unmarshal(eq(mockSoapMessage.getSOAPBody()), eq(LoanSearchResponse.class)))
            .thenReturn(mockJAXBElement);  // Fix: Return JAXBElement

    // Act
    LoanSearchResponse actualResponse = soapService.sendSOAPRequest(
        requestObject,
        LoanSearchMwsRequest.class,
        LoanSearchResponse.class,
        endpointUrl,
        authToken,
        soapAction
    );

    // Assert
    assertNotNull(actualResponse);
    verify(mockSoapConnection, times(1)).call(any(SOAPMessage.class), eq(endpointUrl));
}
