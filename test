import java.text.CharacterIterator;
import java.text.StringCharacterIterator;
import java.util.Collection;
import java.util.List;
import java.util.StringTokenizer;
import java.util.stream.Collectors;

public class EmailUtil {

    // Allowed characters for email validation
    private static final String VALID_EMAIL_CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789._-@";

    /**
     * Sends an HTML email to multiple recipients.
     */
    public static void sendHtml(Collection<String> recipients, String from, String subject, String body, String smtpServer, int deliveryAttempts) throws EmailException {
        Email email = new Email(smtpServer)
                .withSender(from)
                .withAllRecipients(recipients)
                .withSubject(subject)
                .withHtmlMessageBody(body);
        new EmailTransport(email, deliveryAttempts).sendWithoutBlocking();
    }

    /**
     * Sends a text email to a single recipient.
     */
    public static void sendText(String to, String from, String subject, String body, String smtpServer, int deliveryAttempts) throws EmailException {
        Email email = new Email(smtpServer)
                .withSender(from)
                .withRecipient(to)
                .withSubject(subject)
                .withTextMessageBody(body);
        new EmailTransport(email, deliveryAttempts).sendWithoutBlocking();
    }

    /**
     * Sends a text email to multiple recipients.
     */
    public static void sendText(Collection<String> recipients, String from, String subject, String body, String smtpServer, int deliveryAttempts) throws EmailException {
        Email email = new Email(smtpServer)
                .withSender(from)
                .withAllRecipients(recipients)
                .withSubject(subject)
                .withTextMessageBody(body);
        new EmailTransport(email, deliveryAttempts).sendWithoutBlocking();
    }

    /**
     * Validates an email address format.
     */
    public static String isValidEmailAddress(String emailAddress) throws FormatException {
        if (emailAddress == null || emailAddress.isBlank()) {
            throw new FormatException("EmailUtil", "isValidEmailAddress", "The email address is malformed.");
        }

        validateAgainstCharacterList(emailAddress, VALID_EMAIL_CHARACTERS, "email address");

        String[] parts = emailAddress.split("@");
        if (parts.length != 2) {
            throw new FormatException("EmailUtil", "isValidEmailAddress", "Invalid email address format.");
        }

        String domain = parts[1];
        if (domain.startsWith(".") || domain.endsWith(".") || domain.contains("..")) {
            throw new FormatException("EmailUtil", "isValidEmailAddress", "The domain part of the email address is invalid.");
        }

        return emailAddress;
    }

    /**
     * Validates a string against a list of allowed characters.
     */
    protected static String validateAgainstCharacterList(String string, String characters, String type) {
        if (!string.chars().allMatch(c -> characters.indexOf(c) >= 0)) {
            throw new IllegalArgumentException("Invalid character found in " + type);
        }
        return string;
    }
}

/**
 * Updated Email class with a fluent API using modern Java practices.
 */
class Email {
    private final String smtpServer;
    private String sender;
    private Collection<String> recipients;
    private String subject;
    private String body;
    private boolean isHtml;

    public Email(String smtpServer) {
        this.smtpServer = smtpServer;
    }

    public Email withSender(String sender) {
        this.sender = sender;
        return this;
    }

    public Email withRecipient(String recipient) {
        this.recipients = List.of(recipient);
        return this;
    }

    public Email withAllRecipients(Collection<String> recipients) {
        this.recipients = recipients;
        return this;
    }

    public Email withSubject(String subject) {
        this.subject = subject;
        return this;
    }

    public Email withTextMessageBody(String body) {
        this.body = body;
        this.isHtml = false;
        return this;
    }

    public Email withHtmlMessageBody(String body) {
        this.body = body;
        this.isHtml = true;
        return this;
    }
}

/**
 * Dummy EmailTransport class for sending emails.
 */
class EmailTransport {
    private final Email email;
    private final int deliveryAttempts;

    public EmailTransport(Email email, int deliveryAttempts) {
        this.email = email;
        this.deliveryAttempts = deliveryAttempts;
    }

    public void sendWithoutBlocking() {
        // Implementation for sending email asynchronously
    }
}

/**
 * Custom exception for email-related errors.
 */
class EmailException extends Exception {
    public EmailException(String message) {
        super(message);
    }
}

/**
 * Custom exception for format validation errors.
 */
class FormatException extends RuntimeException {
    public FormatException(String className, String methodName, String message) {
        super("[%s.%s] %s".formatted(className, methodName, message));
    }
}
