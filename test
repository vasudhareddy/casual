import java.util.Date;
import java.util.function.Predicate;
import java.util.stream.Stream;

public class EmailTransport implements Runnable {
    private final Email email;
    private final int maxDeliveryAttempts;

    // Constructor
    public EmailTransport(Email email) {
        this(email, 1);
    }

    public EmailTransport(Email email, int attempts) {
        this.email = email;
        this.maxDeliveryAttempts = attempts;
    }

    /**
     * Attempts to send the email with retry logic using Stream.iterate.
     */
    public void send() throws EmailException {
        Predicate<Integer> shouldRetry = attempt -> attempt < maxDeliveryAttempts;

        // Set the sent date for the email
        this.email.getMessage().setSentDate(new Date());

        boolean delivered = Stream.iterate(1, attempt -> attempt + 1) // Start from 1, increment by 1
                .takeWhile(shouldRetry) // Continue while the retry condition is met
                .anyMatch(attempt -> {
                    try {
                        if (attempt > 1) {
                            logDebug("Delivery retry: attempt " + attempt + " of " + maxDeliveryAttempts +
                                    " to deliver message with subject: " + email.getMessage().getSubject());
                        }

                        // Simulate sending email
                        Transport.send(email.getMessage());
                        return true; // Successfully delivered
                    } catch (SendFailedException ex) {
                        logDebug("Send failed on attempt " + attempt + ": " + ex.getMessage());
                        return false; // Retry
                    }
                });

        if (!delivered) {
            String errorMessage = "Message delivery failed, tried " + maxDeliveryAttempts + " times; for message subject: "
                    + email.getMessage().getSubject();
            logError(errorMessage);
            throw new EmailException(this, "send()", errorMessage);
        }
    }

    @Override
    public void run() {
        try {
            this.send();
        } catch (EmailException ex) {
            logWarning("Failed to send email in runnable context: " + ex.getMessage());
        }
    }

    // Logging methods for demonstration purposes
    private void logDebug(String message) {
        System.out.println("DEBUG: " + message);
    }

    private void logError(String message) {
        System.err.println("ERROR: " + message);
    }

    private void logWarning(String message) {
        System.err.println("WARNING: " + message);
    }
}

/**
 * Placeholder classes for Email, Transport, SendFailedException, and EmailException.
 * Replace these with your actual implementations.
 */
class Email {
    private final Message message;

    public Email() {
        this.message = new Message();
    }

    public Message getMessage() {
        return message;
    }
}

class Message {
    private String subject;
    private Date sentDate;

    public String getSubject() {
        return subject;
    }

    public void setSubject(String subject) {
        this.subject = subject;
    }

    public Date getSentDate() {
        return sentDate;
    }

    public void setSentDate(Date sentDate) {
        this.sentDate = sentDate;
    }
}

class Transport {
    public static void send(Message message) throws SendFailedException {
        // Simulate sending the message
        if (Math.random() > 0.7) { // Simulate a 30% chance of failure
            throw new SendFailedException("Simulated send failure");
        }
    }
}

class SendFailedException extends Exception {
    public SendFailedException(String message) {
        super(message);
    }
}

class EmailException extends Exception {
    public EmailException(Object source, String method, String message) {
        super("Error in " + source.getClass().getSimpleName() + "." + method + ": " + message);
    }
}
