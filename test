package com.example.config;

import com.zaxxer.hikari.HikariDataSource;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.transaction.PlatformTransactionManager;

import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class EdgeDataSourceConfigTest {

    @InjectMocks
    private EdgeDataSourceConfig edgeDataSourceConfig;

    @Mock
    private HikariDataSource mockDataSource;

    @Mock
    private LocalContainerEntityManagerFactoryBean mockEntityManagerFactory;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);

        // Mock configuration properties
        edgeDataSourceConfig.username = "testuser";
        edgeDataSourceConfig.password = "testpass";
        edgeDataSourceConfig.url = "jdbc:h2:mem:testdb";
        edgeDataSourceConfig.driver = "org.h2.Driver";
    }

    @Test
    void testEdgeDataSource() {
        HikariDataSource dataSource = edgeDataSourceConfig.edgeDataSource();

        // Validate that the data source is configured correctly
        assertNotNull(dataSource, "HikariDataSource should not be null");
        assertEquals("testuser", dataSource.getUsername());
        assertEquals("testpass", dataSource.getPassword());
        assertEquals("jdbc:h2:mem:testdb", dataSource.getJdbcUrl());
        assertEquals("org.h2.Driver", dataSource.getDriverClassName());
        assertEquals(25, dataSource.getMaximumPoolSize());
        assertEquals(10, dataSource.getMinimumIdle());
    }

    @Test
    void testEdgeEntityManagerFactory() {
        // Mock dependencies
        when(mockDataSource.getJdbcUrl()).thenReturn("jdbc:h2:mem:testdb");

        // Call the method under test
        LocalContainerEntityManagerFactoryBean factoryBean =
                edgeDataSourceConfig.edgeEntityManagerFactory(mockDataSource);

        // Verify the factory bean is configured correctly
        assertNotNull(factoryBean, "EntityManagerFactoryBean should not be null");
        assertEquals("edge", factoryBean.getPersistenceUnitName());
        assertTrue(factoryBean.getJpaPropertyMap().containsKey("hibernate.dialect"));
    }

    @Test
    void testEdgeTransactionManager() {
        // Mock the factory bean
        when(mockEntityManagerFactory.getObject()).thenReturn(null);

        // Call the method under test
        PlatformTransactionManager transactionManager =
                edgeDataSourceConfig.edgeTransactionManager(mockEntityManagerFactory);

        // Validate the transaction manager
        assertNotNull(transactionManager, "TransactionManager should not be null");
    }

    @Test
    void testJpaProperties() {
        // Call the method under test
        Map<String, Object> jpaProperties = edgeDataSourceConfig.jpaProperties();

        // Validate JPA properties
        assertNotNull(jpaProperties, "JPA properties should not be null");
        assertTrue(jpaProperties.containsKey("hibernate.dialect"));
        assertEquals("org.hibernate.dialect.OracleDialect", jpaProperties.get("hibernate.dialect"));
    }
}
